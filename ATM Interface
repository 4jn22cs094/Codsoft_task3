package Java;
import java.io.*;
import java.util.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.Console;

class BankAccount {
    private String name;
    private String encryptedPin;
    private double balance;

    public BankAccount(String name, String pin, double initialBalance) {
        this.name = name;
        this.encryptedPin = encryptPin(pin);
        this.balance = initialBalance;
    }

    public String getName() {
        return name;
    }

    public boolean validatePin(String pin) {
        return encryptedPin.equals(encryptPin(pin));
    }

    public double getBalance() {
        return balance;
    }

    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            return true;
        }
        return false;
    }

    public boolean deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            return true;
        }
        return false;
    }

    public boolean transfer(BankAccount recipient, double amount) {
        if (withdraw(amount)) {
            recipient.deposit(amount);
            return true;
        }
        return false;
    }

    public String toFileString() {
        return name + "," + encryptedPin + "," + balance;
    }

    public static BankAccount fromFileString(String line) {
        String[] parts = line.split(",");
        if (parts.length != 3) return null;
        BankAccount account = new BankAccount(parts[0], "0000", Double.parseDouble(parts[2]));
        account.encryptedPin = parts[1];
        return account;
    }

    private String encryptPin(String pin) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hash = md.digest(pin.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hash) sb.append(String.format("%02x", b));
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error encrypting PIN!");
        }
    }
}

class ATM {
    private Map<String, BankAccount> accounts = new HashMap<>();
    private Scanner scanner = new Scanner(System.in);
    private static final String FILE_NAME = "accounts.txt";

    public ATM() {
        loadAccounts();
    }

    public void start() {
        boolean systemExit = false;

        while (!systemExit) {
            System.out.println("=======================================");
            System.out.println("        üè¶ Welcome to MyBank ATM üè¶");
            System.out.println("=======================================");

            System.out.print("üë§ Enter your Name: ");
            String name = scanner.nextLine();

            BankAccount account = accounts.get(name);

            if (account == null) {
                System.out.println("‚ÑπÔ∏è No account found for " + name + ".");
                System.out.print("üëâ Do you want to register as a new user? (yes/no): ");
                String choice = scanner.nextLine();

                if (choice.equalsIgnoreCase("yes")) {
                    String newPin = readMaskedPIN("üîë Set a 4-digit PIN: ");
                    System.out.print("üíµ Enter initial deposit amount: ‚Çπ");
                    double initialBalance = scanner.nextDouble();
                    scanner.nextLine();

                    account = new BankAccount(name, newPin, initialBalance);
                    accounts.put(name, account);
                    saveAccounts();

                    System.out.println("‚úÖ Account created successfully!");
                } else {
                    System.out.println("üëã Exiting ATM session...");
                    continue; // back to main loop
                }
            }

            // Login process
            String pin = readMaskedPIN("üîë Enter your 4-digit PIN: ");
            if (!account.validatePin(pin)) {
                System.out.println("‚ùå Invalid PIN. Access denied!");
                continue;
            }

            System.out.println("‚úÖ Login successful! Welcome, " + account.getName() + ".");

            boolean exit = false;
            while (!exit) {
                System.out.println("\n===== ATM Menu =====");
                System.out.println("1Ô∏è‚É£  Check Balance");
                System.out.println("2Ô∏è‚É£  Deposit Money");
                System.out.println("3Ô∏è‚É£  Withdraw Money");
                System.out.println("4Ô∏è‚É£  Transfer Money");
                System.out.println("5Ô∏è‚É£  Exit to Main Menu");
                System.out.println("6Ô∏è‚É£  Exit System");
                System.out.print("üëâ Choose an option: ");

                int choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        System.out.printf("üìä Balance: ‚Çπ%.2f\n", account.getBalance());
                        break;
                    case 2:
                        System.out.print("üí∞ Enter deposit: ‚Çπ");
                        double depositAmount = scanner.nextDouble();
                        if (account.deposit(depositAmount)) {
                            System.out.println("‚úÖ Deposit successful!");
                            saveAccounts();
                        } else {
                            System.out.println("‚ùå Invalid amount!");
                        }
                        break;
                    case 3:
                        System.out.print("üíµ Enter withdrawal: ‚Çπ");
                        double withdrawAmount = scanner.nextDouble();
                        if (account.withdraw(withdrawAmount)) {
                            System.out.println("‚úÖ Please collect your cash.");
                            saveAccounts();
                        } else {
                            System.out.println("‚ùå Insufficient funds!");
                        }
                        break;
                    case 4:
                        scanner.nextLine();
                        System.out.print("üë§ Enter recipient name: ");
                        String recipientName = scanner.nextLine();
                        BankAccount recipient = accounts.get(recipientName);
                        if (recipient == null) {
                            System.out.println("‚ùå Recipient not found!");
                            break;
                        }
                        System.out.print("üí∏ Enter transfer amount: ‚Çπ");
                        double transferAmount = scanner.nextDouble();
                        if (account.transfer(recipient, transferAmount)) {
                            System.out.println("‚úÖ Transfer successful to " + recipient.getName() + "!");
                            saveAccounts();
                        } else {
                            System.out.println("‚ùå Transfer failed!");
                        }
                        break;
                    case 5:
                        System.out.println("üëã Logging out... Returning to main menu.");
                        exit = true;
                        break;
                    case 6:
                        System.out.println("üëã Shutting down ATM. Goodbye!");
                        exit = true;
                        systemExit = true;
                        break;
                    default:
                        System.out.println("‚ö†Ô∏è Invalid choice!");
                }
            }
        }
    }

    // PIN masking using Console
    private String readMaskedPIN(String message) {
        Console console = System.console();
        if (console != null) {
            char[] pinArray = console.readPassword(message);
            return new String(pinArray);
        } else {
            // fallback if IDE doesn't support Console
            System.out.print(message);
            return scanner.nextLine();
        }
    }

    private void loadAccounts() {
        File file = new File(FILE_NAME);
        if (!file.exists()) return;

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                BankAccount account = BankAccount.fromFileString(line);
                if (account != null) {
                    accounts.put(account.getName(), account);
                }
            }
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è Error loading accounts: " + e.getMessage());
        }
    }

    private void saveAccounts() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (BankAccount account : accounts.values()) {
                bw.write(account.toFileString());
                bw.newLine();
            }
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è Error saving accounts: " + e.getMessage());
        }
    }
}

public class ATMInterface {
    public static void main(String[] args) {
        ATM atm = new ATM();
        atm.start();
    }
}
